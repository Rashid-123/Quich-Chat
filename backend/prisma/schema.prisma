// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  password       String
  friends        Friend[] @relation("UserAsFriend")
  friendOf       Friend[] @relation("FriendAsUser")
  sentRequests   FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  groupMembers   GroupMember[]
  messagesSent   Message[]    @relation("SentMessages")
  messagesReceived Message[]  @relation("ReceivedMessages")
  messageStatuses MessageStatus[]
  groupsOwned    Group[] @relation("GroupOwner")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Friend {
  id       String  @id @default(uuid())
  userId   String
  friendId String
  createdAt DateTime @default(now())

  user   User @relation("UserAsFriend", fields: [userId], references: [id])
  friend User @relation("FriendAsUser", fields: [friendId], references: [id])
}

model FriendRequest {
  id       String  @id @default(uuid())
  senderId String
  receiverId String
  status   String  @default("pending") // "accepted" or "rejected"
  createdAt DateTime @default(now())

  sender   User @relation("SentRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model Group {
  id       String  @id @default(uuid())
  name     String
  ownerId  String

  owner    User @relation("GroupOwner", fields: [ownerId], references: [id])
  members  GroupMember[]
  messages Message[]
  createdAt DateTime @default(now())
}

model GroupMember {
  id       String  @id @default(uuid())
  groupId  String
  userId   String
  joinedAt DateTime @default(now())

  group    Group @relation(fields: [groupId], references: [id])
  user     User  @relation(fields: [userId], references: [id])
}

model Message {
  id        String  @id @default(uuid())
  senderId  String
  receiverId String? // For 1-to-1 chats, nullable if it's a group message
  groupId   String? // Nullable if it's a direct message
  content   String
  createdAt DateTime @default(now())

  sender    User   @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User?  @relation("ReceivedMessages", fields: [receiverId], references: [id])
  group     Group? @relation(fields: [groupId], references: [id])
  status    MessageStatus[]
}

model MessageStatus {
  id        String  @id @default(uuid())
  messageId String
  userId    String
  status    String @default("sent") // "sent", "delivered", "read"
  updatedAt DateTime @updatedAt

  message   Message @relation(fields: [messageId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}
